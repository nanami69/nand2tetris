// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // アドレス命令: 0vvvvvvvvvvvvvvv, 計算命令: 111accccccdddjjj
    // アドレス命令であればAレジスタに格納する
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=aIn);

    // instruction[15]==0 or instruction[5](=d1)==1
    Not(in=instruction[15], out=acmd);
    Or(a=acmd, b=instruction[5], out=aLoad);

    // Aレジスタ: MuxとaddressMへ出力
    ARegister(in=aIn, load=aLoad, out=a, out[0..14]=addressM);

    // Dレジスタ(ALUへの入力①)
    // 計算命令（i=1）かつd2が1
    And(a=instruction[4], b=instruction[15], out=dLoad);
    DRegister(in=aluout, load=dLoad, out=dout);

    // ALUへの入力②
    // aビットが１ならinM, 0ならA命令
    Mux16(a=a, b=inM, sel=instruction[12], out=am);

    // ALU
    // 図2-6と図4-3よりzx(c1), nx(c2)...no(c6)
    ALU(
        x=dout,y=am,
        zx=instruction[11],
        nx=instruction[10],
        zy=instruction[9],
        ny=instruction[8],
        f=instruction[7],
        no=instruction[6],
        out=aluout,out=outM,
        zr=zr,ng=ng
    );

    // PC
    // j1-j3全て0ならinc=1, A命令ならinc=1
    // -> j1-j3どれかが1かつA命令じゃなければ(instruction[15]=1)load=1

    // j1, j2, j3
    // 図4-5より
    And(a=instruction[2], b=ng, out=j1true); // out < 0
    And(a=instruction[1], b=zr, out=j2true); // out = 0

    // out > 0
    Or(a=ng, b=zr, out=minus);
    Not(in=minus, out=plus);
    And(a=instruction[0], b=plus, out=j3true);

    Or(a=j1true, b=j2true, out=j12true);
    Or(a=j12true, b=j3true, out=j123true);
    And(a=j123true, b=instruction[15], out=load);
    Not(in=load, out=inc);

    PC(in=a, inc=inc, load=load, reset=reset, out[0..14]=pc);

    // writeM
    // C命令かつd3=1
    And(a=instruction[3], b=instruction[15], out=writeM);

}